package himedia.spring.ver3.service;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import himedia.spring.ver3.domain.Member;
import himedia.spring.ver3.repository.MemberRepository;
import himedia.spring.ver3.repository.MemoryMemberRepository;
import java.util.List;
import java.util.Optional;

// 보통 파일명에 해당 기능을 유추할만한 이름으로 짓는게 좋으며 통일감 있는게 좋음
// 면접관이 프로젝트 왜 이렇게 했냐 하면 대답할 줄 알아야 함 (통일 시켰다 등)
// 이제 컨트롤러에서 받아줘야 함
@Service
public class MemberService {
	
	/* 
	 * ===============================================================
	 * MemberService 는 MemberRepository 에 의존한다 !
	 * [방법 1] 직접 객체를 생성          (수동 관리)
	 * [방법 2] 생성자를 통한 의존성 주입 (자동 관리)
	 * ===============================================================
	 */
	
	// field
	// [방법 1] 직접 객체를 생성 (수동 관리)
	// private final MemberRepository repository = new MemoryMemberRepository();
//////////////////////////////////////////////////////////////////////////////////////////////////
	// [방법 2] 생성자를 통한 의존성 주입 (자동 관리)
	private final MemberRepository repository; 
	
	@Autowired
	public MemberService(MemoryMemberRepository repository) { 
		this.repository = repository;
		 System.out.println("[MemberService] 생성자 실행됨 : 매개변수 1개");
	}
	
	// error ! Error creating bean with name 'memberController'
	// 생성자가 여러 개인 경우 @Autowired 꼭 쓰기, 쓰면 error 안남
	public MemberService(MemoryMemberRepository repository, int age) { 
		this.repository = repository;
		System.out.println("[MemberService] 생성자 실행됨 : 매개변수 2개");
	}
//////////////////////////////////////////////////////////////////////////////////////////////////
	
	// [저장] 회원가입
	public Long join(Member member) {
		repository.save(member);
		return member.getId();
	}
	
	// [조회] 아이디로 검색
	public Optional<Member> findId(Long memberId) {
		return repository.findById(memberId);
	}
	
	// [조회] 이름으로 검색
	public Optional<Member> findName(String memberName) {
		return repository.findByName(memberName);
	}
	
	// [조회] 전체 회원 검색
    public List<Member> findAllMembers() {
        return repository.findAll();
    }
}
