package lambda;

/* * 람다가 나온 이유 : 자바에 있었던 것은 아님
 * 람다는 함수
 * 일반적인 이야기
 * 람다 표현식이라는 게 함수를 수학의 식처럼 간단하게 표현하자 나온게 람다 표현식
 * 함수를 표현식으로 자바스크립트에서는 화살표 함수
 * 자바는 함수 개념보다 메서드 개념이 있는데, 메서드를 간단하게 식처럼 표현한 것
 * 메서드를 간단/간략하게 표현했다 -> 이게 무언가를 생략이 됐다는 뜻
 * 아무 메서드를 생략하고 간략하게 표현하지 않음, 컴파일러가 생략된 것을 추정해야되는데
 * 메서드 중에 추정할 수 있는 메서드만 람다표현식으로 표현할 수 있음
 * 반드시 형태를 추정 이루어 짐작할 수 있는 메서드만 ! 가능하다

/*
 * [lambda experssion] 람다 표현식, 람다식, 람다
 * : Java 8 부터 함수형 프로그래밍 지원을 위해 Lambda, Stream 도입
 * : 메서드를 하나의 식으로 표현
 * : 람다는 익명 함수 (anonymous function) 를 의미 -> 메서드명 없음
 * : 사실상 객체로 관리
 * 
 * << 특징 >>
 * - 메서드명과 반환형 생략, return 키워드 대신 식 (expression) 사용
 * - 람다식 내 지역변수 final
 * 
 * << 장점 >>
 * - 코드 간결 -> 하지만 늘 간결하다고 좋은 것이 x, 문법을 이해했을 때만 좋음
 * - 메서드 정의 없이 한 번에 처리 가능하므로 생산성 높아짐
 * 
 * << 단점 >>
 * - 익명 함수이므로 재사용 불가능
 * - 디버깅 어려움
 * - 재귀(호출)로 부적합
 * 
 * << 문법 >>
 * [형태 1] 매개변수가 없고, body {} 생략
 * () -> 식 (expression)
 * 
 * [형태 2] 매개변수가 1개이고, body {} 생략
 * 매개변수가 1개일때, () 생략 가능
 * (parameter) -> 식 (expression)
 * parameter -> 식 (expression)
 * 
 * [형태 3] 매개변수가 2개 이상이고, body {} 명시
 * (parameter1, parameter2) -> {
 * 		code;
 * 		code;
 * 		return 값;
 * };
 * 
 * () : parameter - 메서드의 매개변수
 * -> : arrow     - {} 실행
 * {} : body 	  - 메서드의 body
 * 
 * 
 * << 활용 >> 
 * 1. 참조변수에 람다식을 저장
 * 2. return 
 * 3. 인수
 * 
 */

public class Ex01 {

	public static void main(String[] args) {

		
		
	}
}
